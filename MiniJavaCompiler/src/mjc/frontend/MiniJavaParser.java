/* Generated By:JavaCC: Do not edit this line. MiniJavaParser.java */
package mjc.frontend;

 import java.io.InputStream;

import mjc.frontend.syntaxtree.And;
import mjc.frontend.syntaxtree.ArrayAssign;
import mjc.frontend.syntaxtree.ArrayLength;
import mjc.frontend.syntaxtree.ArrayLookup;
import mjc.frontend.syntaxtree.Assign;
import mjc.frontend.syntaxtree.Block;
import mjc.frontend.syntaxtree.BooleanType;
import mjc.frontend.syntaxtree.Call;
import mjc.frontend.syntaxtree.ClassDecl;
import mjc.frontend.syntaxtree.ClassDeclList;
import mjc.frontend.syntaxtree.Comp;
import mjc.frontend.syntaxtree.Exp;
import mjc.frontend.syntaxtree.ExpList;
import mjc.frontend.syntaxtree.False;
import mjc.frontend.syntaxtree.Identifier;
import mjc.frontend.syntaxtree.IdentifierExp;
import mjc.frontend.syntaxtree.IdentifierType;
import mjc.frontend.syntaxtree.If;
import mjc.frontend.syntaxtree.IntArrayType;
import mjc.frontend.syntaxtree.IntBinop;
import mjc.frontend.syntaxtree.IntegerLiteral;
import mjc.frontend.syntaxtree.IntegerType;
import mjc.frontend.syntaxtree.MethodDecl;
import mjc.frontend.syntaxtree.MethodDeclList;
import mjc.frontend.syntaxtree.NewArray;
import mjc.frontend.syntaxtree.NewObject;
import mjc.frontend.syntaxtree.Not;
import mjc.frontend.syntaxtree.Or;
import mjc.frontend.syntaxtree.Print;
import mjc.frontend.syntaxtree.Program;
import mjc.frontend.syntaxtree.Statement;
import mjc.frontend.syntaxtree.StatementList;
import mjc.frontend.syntaxtree.This;
import mjc.frontend.syntaxtree.True;
import mjc.frontend.syntaxtree.Type;
import mjc.frontend.syntaxtree.VarDecl;
import mjc.frontend.syntaxtree.VarDeclList;
import mjc.frontend.syntaxtree.While;

public class MiniJavaParser implements MiniJavaParserConstants {

            /** Main entry point. */
            public static void main(String[] args) throws ParseException {
                MiniJavaParser parser = new MiniJavaParser(System.in);
                Program prog = parser.Prog();
                System.out.println("Printed tree:");
                System.out.println(prog.strRepr(1));
            }

            public Program parse(InputStream content) throws ParseException {
                MiniJavaParser parser = new MiniJavaParser(content);
                return parser.Prog();
            }

            public MiniJavaParser() {}

  static final public Program Prog() throws ParseException {
    ClassDecl mc;
    ClassDecl cd;
    ClassDeclList cdl = new ClassDeclList();
    mc = MainClass();
    cdl.addElement(mc);
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CLASS:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      cd = ClassDecl();
      cdl.addElement(cd);
    }
        Program p = new Program(cdl);
        p.setPosition(mc.getLine(), mc.getColumn());
        {if (true) return p;}
    throw new Error("Missing return statement in function");
  }

  static final public ClassDecl MainClass() throws ParseException {
    Token t1, t2, t3, t4;
    Identifier i1, i2, i3, superClass = null;
    VarDeclList fl = new VarDeclList();
    VarDecl vd;
    VarDeclList vdl = new VarDeclList();
    Statement s;
    StatementList sl = new StatementList();
    MethodDeclList mdl = new MethodDeclList();
    t1 = jj_consume_token(CLASS);
    i1 = id();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EXTENDS:
      jj_consume_token(EXTENDS);
      superClass = id();
      break;
    default:
      jj_la1[1] = jj_gen;
      ;
    }
    jj_consume_token(46);
    jj_consume_token(PUBLIC);
    jj_consume_token(STATIC);
    t2 = jj_consume_token(VOID);
    t3 = jj_consume_token(MAIN);
    jj_consume_token(LPAR);
    t4 = jj_consume_token(STRING);
    jj_consume_token(47);
    jj_consume_token(48);
    i2 = id();
    jj_consume_token(RPAR);
    jj_consume_token(46);
    label_2:
    while (true) {
      if (jj_2_1(2)) {
        ;
      } else {
        break label_2;
      }
      vd = VarDecl();
      vdl.addElement(vd);
    }
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WHILE:
      case IF:
      case FOR:
      case ID:
      case 46:
      case 51:
        ;
        break;
      default:
        jj_la1[2] = jj_gen;
        break label_3;
      }
      s = Statement();
      sl.addElement(s);
    }
    jj_consume_token(49);
    jj_consume_token(49);
        fl.addElement(new VarDecl(new IdentifierType("String[]", t4.beginLine, t4.beginColumn), i2));
        i3 = new Identifier(t3.image);
        i3.setPosition(t3.beginLine, t3.beginColumn);
        mdl.addElement(
            new MethodDecl(
                new IntegerType(t2.beginLine, t2.beginColumn),
                i3, fl, vdl, sl, new IntegerLiteral(0), true
            )
        );
        ClassDecl mainclass = new ClassDecl(i1, new VarDeclList(), mdl);
        mainclass.setPosition(t1.beginLine, t1.beginColumn);
        if (superClass != null) mainclass.setExtends(superClass.toString());
        {if (true) return mainclass;}
    throw new Error("Missing return statement in function");
  }

  static final public ClassDecl ClassDecl() throws ParseException {
    Token t;
    Identifier i, superClass = null;
    VarDecl vd;
    VarDeclList vdl = new VarDeclList();
    MethodDecl md;
    MethodDeclList mdl = new MethodDeclList();
    t = jj_consume_token(CLASS);
    i = id();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EXTENDS:
      jj_consume_token(EXTENDS);
      superClass = id();
      break;
    default:
      jj_la1[3] = jj_gen;
      ;
    }
    jj_consume_token(46);
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INT:
      case BOOLEAN:
      case ID:
        ;
        break;
      default:
        jj_la1[4] = jj_gen;
        break label_4;
      }
      vd = VarDecl();
                               vdl.addElement(vd);
    }
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PUBLIC:
        ;
        break;
      default:
        jj_la1[5] = jj_gen;
        break label_5;
      }
      md = MethodDecl();
                                  mdl.addElement(md);
    }
    jj_consume_token(49);
            ClassDecl cd = new ClassDecl(i, vdl, mdl);
            cd.setPosition(t.beginLine, t.beginColumn);
        if (superClass != null) cd.setExtends(superClass.toString());
            {if (true) return cd;}
    throw new Error("Missing return statement in function");
  }

  static final public VarDecl VarDecl() throws ParseException {
    Type t;
    Identifier i;
    t = Type();
    i = id();
    jj_consume_token(SEMI);
    VarDecl vd = new VarDecl(t, i);
    vd.setPosition(t.getLine(), t.getColumn());
    {if (true) return vd;}
    throw new Error("Missing return statement in function");
  }

  static final public MethodDecl MethodDecl() throws ParseException {
    Token tk;
    Type t;
    Identifier i;
    VarDeclList fl = new VarDeclList();
    VarDecl vd;
    VarDeclList vdl = new VarDeclList();
    Statement s;
    StatementList sl = new StatementList();
    Exp e;
    tk = jj_consume_token(PUBLIC);
    t = Type();
    i = id();
    jj_consume_token(LPAR);
    fl = FormalList();
    jj_consume_token(RPAR);
    jj_consume_token(46);
    label_6:
    while (true) {
      if (jj_2_2(2)) {
        ;
      } else {
        break label_6;
      }
      vd = VarDecl();
                                           vdl.addElement(vd);
    }
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WHILE:
      case IF:
      case FOR:
      case ID:
      case 46:
      case 51:
        ;
        break;
      default:
        jj_la1[6] = jj_gen;
        break label_7;
      }
      s = Statement();
                           sl.addElement(s);
    }
    jj_consume_token(RETURN);
    e = Exp();
    jj_consume_token(SEMI);
    jj_consume_token(49);
        MethodDecl md = new MethodDecl(t, i, fl, vdl, sl, e, false);
        md.setPosition(tk.beginLine, tk.beginColumn);
        {if (true) return md;}
    throw new Error("Missing return statement in function");
  }

  static final public VarDeclList FormalList() throws ParseException {
    Type t;
    Identifier i;
    VarDeclList fl = new VarDeclList();
    VarDecl f;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INT:
    case BOOLEAN:
    case ID:
      t = Type();
      i = id();
            f = new VarDecl(t,i);
            f.setPosition(t.getLine(), t.getColumn());
            fl.addElement(f);
      label_8:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 50:
          ;
          break;
        default:
          jj_la1[7] = jj_gen;
          break label_8;
        }
        jj_consume_token(50);
        t = Type();
        i = id();
                f = new VarDecl(t,i);
                f.setPosition(t.getLine(), t.getColumn());
                fl.addElement(f);
      }
      break;
    default:
      jj_la1[8] = jj_gen;
      ;
    }
      {if (true) return fl;}
    throw new Error("Missing return statement in function");
  }

  static final public Type Type() throws ParseException {
    Token t;
    Identifier i;
    if (jj_2_3(2)) {
      t = jj_consume_token(INT);
      jj_consume_token(47);
      jj_consume_token(48);
                            {if (true) return new IntArrayType(t.beginLine, t.beginColumn);}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOLEAN:
        t = jj_consume_token(BOOLEAN);
                        {if (true) return new BooleanType(t.beginLine, t.beginColumn);}
        break;
      case INT:
        t = jj_consume_token(INT);
                    {if (true) return new IntegerType(t.beginLine, t.beginColumn);}
        break;
      case ID:
        i = id();
                   {if (true) return new IdentifierType(i.toString(), i.getLine(), i.getColumn());}
        break;
      default:
        jj_la1[9] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  static final public Statement Statement() throws ParseException {
    Token t;
    Statement s1, s2, s3;
    StatementList sl = new StatementList();
    Exp e1 = null;
    Exp e2 = null;
    While w;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 46:
      t = jj_consume_token(46);
      label_9:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case WHILE:
        case IF:
        case FOR:
        case ID:
        case 46:
        case 51:
          ;
          break;
        default:
          jj_la1[10] = jj_gen;
          break label_9;
        }
        s1 = Statement();
                                   sl.addElement(s1);
      }
      jj_consume_token(49);
            Block b = new Block(sl);
            b.setPosition(t.beginLine, t.beginColumn);
            {if (true) return b;}
      break;
    case IF:
      t = jj_consume_token(IF);
      jj_consume_token(LPAR);
      e1 = Exp();
      jj_consume_token(RPAR);
      s1 = Statement();
      s2 = ElseStm();
            If f = new If(e1,s1,s2);
            f.setPosition(t.beginLine, t.beginColumn);
            {if (true) return f;}
      break;
    case WHILE:
      t = jj_consume_token(WHILE);
      jj_consume_token(LPAR);
      e1 = Exp();
      jj_consume_token(RPAR);
      s1 = Statement();
            w = new While(e1,s1);
            w.setPosition(t.beginLine, t.beginColumn);
            {if (true) return w;}
      break;
    case FOR:
      t = jj_consume_token(FOR);
      jj_consume_token(LPAR);
      s1 = Statement();
      e1 = Exp();
      jj_consume_token(SEMI);
      s2 = AssignStatement();
      jj_consume_token(RPAR);
      s3 = Statement();
            sl.addElement(s1);
            StatementList sl2 = new StatementList();
            sl2.addElement(s3);
            sl2.addElement(s2);
            Block b1 = new Block(sl2);
            w = new While(e1, b1);
            sl.addElement(w);
            Block b2 = new Block(sl);
            b2.setPosition(t.beginLine, t.beginColumn);
            {if (true) return b2;}
      break;
    case 51:
      t = jj_consume_token(51);
      jj_consume_token(LPAR);
      e1 = Exp();
      jj_consume_token(RPAR);
      jj_consume_token(SEMI);
            Print p = new Print(e1);
            p.setPosition(t.beginLine, t.beginColumn);
            {if (true) return p;}
      break;
    case ID:
      s1 = AssignStatement();
      jj_consume_token(SEMI);
                                      {if (true) return s1;}
      break;
    default:
      jj_la1[11] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public Statement AssignStatement() throws ParseException {
    Identifier i;
    Exp e1, e2;
    IdentifierExp ie;
    Assign a;
    i = id();
                ie = new IdentifierExp(i.toString());
                ie.setPosition(i.getLine(), i.getColumn());
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 47:
      jj_consume_token(47);
      e1 = Exp();
      jj_consume_token(48);
      jj_consume_token(ASSIGN);
      e2 = Exp();
            ArrayAssign aa = new ArrayAssign(ie,e1,e2);
            aa.setPosition(ie.getLine(), ie.getColumn());
            {if (true) return aa;}
      break;
    case ASSIGN:
      jj_consume_token(ASSIGN);
      e2 = Exp();
            a = new Assign(ie,e2);
            a.setPosition(ie.getLine(), ie.getColumn());
            {if (true) return a;}
      break;
    case PLUS:
      jj_consume_token(PLUS);
      jj_consume_token(PLUS);
            e2 = new IntBinop(ie, new IntegerLiteral(1), "+");
            a = new Assign(ie, e2);
            a.setPosition(ie.getLine(), ie.getColumn());
            {if (true) return a;}
      break;
    case MINUS:
      jj_consume_token(MINUS);
      jj_consume_token(MINUS);
            e2 = new IntBinop(ie, new IntegerLiteral(1), "-");
            a = new Assign(ie, e2);
            a.setPosition(ie.getLine(), ie.getColumn());
            {if (true) return a;}
      break;
    default:
      jj_la1[12] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public Statement ElseStm() throws ParseException {
    Statement s;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ELSE:
      jj_consume_token(ELSE);
      s = Statement();
                              {if (true) return s;}
      break;
    default:
      jj_la1[13] = jj_gen;
                                              {if (true) return null;}
    }
    throw new Error("Missing return statement in function");
  }

  static final public Exp Exp() throws ParseException {
    Exp orterm;
    Exp expprim;
    orterm = OrTerm();
    expprim = ExpPrim(orterm);
      {if (true) return expprim;}
    throw new Error("Missing return statement in function");
  }

  static final public Exp ExpPrim(Exp e1) throws ParseException {
    Exp e2;
    Token t;
    Identifier i;
    ExpList el = new ExpList();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 47:
      t = jj_consume_token(47);
      e2 = Exp();
      jj_consume_token(48);
                ArrayLookup alp = new ArrayLookup(e1,e2);
                alp.setPosition(t.beginLine, t.beginColumn);
                {if (true) return alp;}
      break;
    case LENGTH:
      t = jj_consume_token(LENGTH);
                ArrayLength alt = new ArrayLength(e1);
                alt.setPosition(t.beginLine, t.beginColumn);
                {if (true) return alt;}
      break;
    case 52:
      t = jj_consume_token(52);
      i = id();
      el = ExpList();
                Call c = new Call(e1,i,el);
                c.setPosition(t.beginLine, t.beginColumn);
                {if (true) return c;}
      break;
    default:
      jj_la1[14] = jj_gen;
          {if (true) return e1;}
    }
    throw new Error("Missing return statement in function");
  }

  static final public Exp OrTerm() throws ParseException {
    Exp andterm;
    Exp ortermprim;
    Exp expprim;
    andterm = AndTerm();
    expprim = ExpPrim(andterm);
    ortermprim = OrTermPrim(expprim);
      {if (true) return ortermprim;}
    throw new Error("Missing return statement in function");
  }

  static final public Exp OrTermPrim(Exp o) throws ParseException {
    Exp andterm;
    Exp ortermprim;
    Exp expprim;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OR:
      jj_consume_token(OR);
      andterm = AndTerm();
      expprim = ExpPrim(andterm);
      ortermprim = OrTermPrim(new Or(o,expprim));
          {if (true) return ortermprim;}
      break;
    default:
      jj_la1[15] = jj_gen;
                                   {if (true) return o;}
    }
    throw new Error("Missing return statement in function");
  }

  static final public Exp AndTerm() throws ParseException {
    Exp compterm;
    Exp andtermprim;
    Exp expprim;
    compterm = CompTerm();
    expprim = ExpPrim(compterm);
    andtermprim = AndTermPrim(expprim);
      {if (true) return andtermprim;}
    throw new Error("Missing return statement in function");
  }

  static final public Exp AndTermPrim(Exp a) throws ParseException {
    Exp compterm;
    Exp andtermprim;
    Exp expprim;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case AND:
      jj_consume_token(AND);
      compterm = CompTerm();
      expprim = ExpPrim(compterm);
      andtermprim = AndTermPrim(new And(a, expprim));
          {if (true) return andtermprim;}
      break;
    default:
      jj_la1[16] = jj_gen;
                                    {if (true) return a;}
    }
    throw new Error("Missing return statement in function");
  }

  static final public Exp CompTerm() throws ParseException {
    Exp plusterm;
    Exp comptermprim;
    Exp expprim;
    plusterm = PlusTerm();
    expprim = ExpPrim(plusterm);
    comptermprim = CompTermPrim(expprim);
      {if (true) return comptermprim;}
    throw new Error("Missing return statement in function");
  }

  static final public Exp CompTermPrim(Exp c) throws ParseException {
    Token t;
    Exp plusterm;
    Exp comptermprim;
    Exp expprim;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LT:
    case LE:
    case GT:
    case GE:
    case EQ:
    case NE:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LT:
        t = jj_consume_token(LT);
        break;
      case LE:
        t = jj_consume_token(LE);
        break;
      case GT:
        t = jj_consume_token(GT);
        break;
      case GE:
        t = jj_consume_token(GE);
        break;
      case EQ:
        t = jj_consume_token(EQ);
        break;
      case NE:
        t = jj_consume_token(NE);
        break;
      default:
        jj_la1[17] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      plusterm = PlusTerm();
      expprim = ExpPrim(plusterm);
      comptermprim = CompTermPrim(new Comp(c, expprim, t.image));
          {if (true) return comptermprim;}
      break;
    default:
      jj_la1[18] = jj_gen;
                                     {if (true) return c;}
    }
    throw new Error("Missing return statement in function");
  }

  static final public Exp PlusTerm() throws ParseException {
    Exp minusterm;
    Exp plustermprim;
    Exp expprim;
    minusterm = MinusTerm();
    expprim = ExpPrim(minusterm);
    plustermprim = PlusTermPrim(expprim);
      {if (true) return plustermprim;}
    throw new Error("Missing return statement in function");
  }

  static final public Exp PlusTermPrim(Exp p) throws ParseException {
    Token t;
    Exp minusterm;
    Exp plustermprim;
    Exp expprim;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS:
      t = jj_consume_token(PLUS);
      minusterm = MinusTerm();
      expprim = ExpPrim(minusterm);
      plustermprim = PlusTermPrim(new IntBinop(p, expprim, t.image));
          {if (true) return plustermprim;}
      break;
    default:
      jj_la1[19] = jj_gen;
                                     {if (true) return p;}
    }
    throw new Error("Missing return statement in function");
  }

  static final public Exp MinusTerm() throws ParseException {
    Exp multterm;
    Exp minustermprim;
    Exp expprim;
    multterm = MultTerm();
    expprim = ExpPrim(multterm);
    minustermprim = MinusTermPrim(expprim);
      {if (true) return minustermprim;}
    throw new Error("Missing return statement in function");
  }

  static final public Exp MinusTermPrim(Exp m) throws ParseException {
    Token t;
    Exp multterm;
    Exp minustermprim;
    Exp expprim;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MINUS:
      t = jj_consume_token(MINUS);
      multterm = MultTerm();
      expprim = ExpPrim(multterm);
      minustermprim = MinusTermPrim(new IntBinop(m, expprim, t.image));
          {if (true) return minustermprim;}
      break;
    default:
      jj_la1[20] = jj_gen;
                                      {if (true) return m;}
    }
    throw new Error("Missing return statement in function");
  }

  static final public Exp MultTerm() throws ParseException {
    boolean negate = false;
    Token t;
    Exp factor;
    Exp multtermprim;
    Exp expprim;
    label_10:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 53:
        ;
        break;
      default:
        jj_la1[21] = jj_gen;
        break label_10;
      }
      t = jj_consume_token(53);
               negate = !negate;
    }
    factor = Factor();
    expprim = ExpPrim(factor);
    multtermprim = MultTermPrim(expprim);
        if (negate) {
            Not n = new Not(multtermprim);
            {if (true) return n;}
        } else { {if (true) return multtermprim;} }
      {if (true) return multtermprim;}
    throw new Error("Missing return statement in function");
  }

  static final public Exp MultTermPrim(Exp f) throws ParseException {
    Token t;
    Exp factor;
    Exp multtermprim;
    Exp expprim;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TIMES:
      t = jj_consume_token(TIMES);
      factor = Factor();
      expprim = ExpPrim(factor);
      multtermprim = MultTermPrim(new IntBinop(f, expprim, t.image));
          {if (true) return multtermprim;}
      break;
    default:
      jj_la1[22] = jj_gen;
                                     {if (true) return f;}
    }
    throw new Error("Missing return statement in function");
  }

  static final public Exp Factor() throws ParseException {
    Token t;
    Identifier i;
    Exp e;
    int sign = 1;
    long number;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NUM:
    case MINUS:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MINUS:
        jj_consume_token(MINUS);
                sign = -1;
        break;
      default:
        jj_la1[23] = jj_gen;
        ;
      }
      t = jj_consume_token(NUM);
                number = Long.parseLong(t.image)*sign;
                if (number > Integer.MAX_VALUE || number < Integer.MIN_VALUE) {
                    {if (true) throw new ParseException("int cannot be larger than 2^31");}
                }
                IntegerLiteral il = new IntegerLiteral((int)number);
                il.setPosition(t.beginLine, t.beginColumn);
                {if (true) return il;}
      break;
    case TRUE:
      t = jj_consume_token(TRUE);
                   {if (true) return new True(t.beginLine, t.beginColumn);}
      break;
    case FALSE:
      t = jj_consume_token(FALSE);
                    {if (true) return new False(t.beginLine, t.beginColumn);}
      break;
    case ID:
      i = id();
                IdentifierExp ie = new IdentifierExp(i.toString());
                ie.setPosition(i.getLine(), i.getColumn());
                {if (true) return ie;}
      break;
    case THIS:
      t = jj_consume_token(THIS);
                   {if (true) return new This(t.beginLine, t.beginColumn);}
      break;
    case NEW:
      t = jj_consume_token(NEW);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INT:
        jj_consume_token(INT);
        jj_consume_token(47);
        e = Exp();
        jj_consume_token(48);
                    NewArray na = new NewArray(e);
                    na.setPosition(t.beginLine, t.beginColumn);
                    {if (true) return na;}
        break;
      case ID:
        i = id();
        jj_consume_token(LPAR);
        jj_consume_token(RPAR);
                    NewObject no = new NewObject(i);
                    no.setPosition(t.beginLine, t.beginColumn);
                    {if (true) return no;}
        break;
      default:
        jj_la1[24] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    case LPAR:
      jj_consume_token(LPAR);
      e = Exp();
      jj_consume_token(RPAR);
                                {if (true) return e;}
      break;
    default:
      jj_la1[25] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public Identifier id() throws ParseException {
    Token t;
    t = jj_consume_token(ID);
        Identifier i = new Identifier(t.image);
        i.setPosition(t.beginLine, t.beginColumn);
        {if (true) return i;}
    throw new Error("Missing return statement in function");
  }

  static final public ExpList ExpList() throws ParseException {
    ExpList el = new ExpList();
    Exp e;
    jj_consume_token(LPAR);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case THIS:
    case NEW:
    case NUM:
    case TRUE:
    case FALSE:
    case MINUS:
    case LPAR:
    case ID:
    case 53:
      e = Exp();
                el.addElement(e);
                el.setPosition(e.getLine(), e.getColumn());
      label_11:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 50:
          ;
          break;
        default:
          jj_la1[26] = jj_gen;
          break label_11;
        }
        jj_consume_token(50);
        e = Exp();
                  el.addElement(e);
      }
      break;
    default:
      jj_la1[27] = jj_gen;
      ;
    }
    jj_consume_token(RPAR);
      {if (true) return el;}
    throw new Error("Missing return statement in function");
  }

  static private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  static private boolean jj_3R_14() {
    if (jj_scan_token(ID)) return true;
    return false;
  }

  static private boolean jj_3_2() {
    if (jj_3R_12()) return true;
    return false;
  }

  static private boolean jj_3_1() {
    if (jj_3R_12()) return true;
    return false;
  }

  static private boolean jj_3R_17() {
    if (jj_3R_14()) return true;
    return false;
  }

  static private boolean jj_3R_16() {
    if (jj_scan_token(INT)) return true;
    return false;
  }

  static private boolean jj_3R_15() {
    if (jj_scan_token(BOOLEAN)) return true;
    return false;
  }

  static private boolean jj_3R_12() {
    if (jj_3R_13()) return true;
    if (jj_3R_14()) return true;
    return false;
  }

  static private boolean jj_3_3() {
    if (jj_scan_token(INT)) return true;
    if (jj_scan_token(47)) return true;
    return false;
  }

  static private boolean jj_3R_13() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_3()) {
    jj_scanpos = xsp;
    if (jj_3R_15()) {
    jj_scanpos = xsp;
    if (jj_3R_16()) {
    jj_scanpos = xsp;
    if (jj_3R_17()) return true;
    }
    }
    }
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public MiniJavaParserTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[28];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x200,0x4000,0x1c0000,0x4000,0x2400000,0x400,0x1c0000,0x0,0x2400000,0x2400000,0x1c0000,0x1c0000,0x40000000,0x20000000,0x200000,0x0,0x80000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x400000,0xd030000,0x0,0xd030000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x86000,0x0,0x2000,0x0,0x86000,0x40000,0x2000,0x2000,0x86000,0x86000,0x8006,0x0,0x108000,0x10,0x0,0x3e1,0x3e1,0x2,0x4,0x200000,0x8,0x4,0x2000,0x2404,0x40000,0x202404,};
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[3];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public MiniJavaParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public MiniJavaParser(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new MiniJavaParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 28; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 28; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public MiniJavaParser(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new MiniJavaParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 28; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 28; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public MiniJavaParser(MiniJavaParserTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 28; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(MiniJavaParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 28; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[54];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 28; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 54; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  static private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 3; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

    }
